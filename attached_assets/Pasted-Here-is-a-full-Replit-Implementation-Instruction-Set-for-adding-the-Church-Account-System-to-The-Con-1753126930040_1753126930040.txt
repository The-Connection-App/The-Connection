Here is a full Replit Implementation Instruction Set for adding the Church Account System to The Connection App. This assumes your current stack (React + TypeScript + Vite frontend, Express + TypeScript backend, PostgreSQL with Drizzle ORM, hosted on Neon).

⸻

Replit Implementation Instruction Set: Church Accounts

⸻

1. Database Setup (Drizzle ORM)

1.1. Add organizations Table

Create a new migration in server/db/migrations:

import { pgTable, serial, text, timestamp, uuid } from "drizzle-orm/pg-core";

export const organizations = pgTable("organizations", {
  id: uuid("id").primaryKey().defaultRandom(),
  name: text("name").notNull(),
  adminUserId: uuid("admin_user_id").notNull(),
  plan: text("plan").default("free"), // 'free', 'standard', 'premium'
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

1.2. Add organization_users Table

export const organizationUsers = pgTable("organization_users", {
  id: uuid("id").primaryKey().defaultRandom(),
  organizationId: uuid("organization_id").notNull(),
  userId: uuid("user_id").notNull(),
  role: text("role").default("member"), // 'admin', 'member'
  joinedAt: timestamp("joined_at").defaultNow(),
});

1.3. Run Migration

In Replit Shell/Console:

npm run db:generate
npm run db:migrate


⸻

2. Backend Implementation (Express API)

2.1. Create organizationRoutes.ts

In server/routes/organizationRoutes.ts:

import express from "express";
import { db } from "../db";
import { organizations, organizationUsers } from "../db/schema";
import { eq } from "drizzle-orm";

const router = express.Router();

// Create a new organization
router.post("/create", async (req, res) => {
  const { name, adminUserId } = req.body;
  if (!name || !adminUserId) return res.status(400).send("Missing fields");

  const [org] = await db.insert(organizations)
    .values({ name, adminUserId, plan: "free" })
    .returning();
  
  await db.insert(organizationUsers)
    .values({ organizationId: org.id, userId: adminUserId, role: "admin" });

  res.json(org);
});

// Fetch organization details
router.get("/:id", async (req, res) => {
  const { id } = req.params;
  const [org] = await db.select().from(organizations).where(eq(organizations.id, id));
  res.json(org);
});

// Invite user to organization
router.post("/:id/invite", async (req, res) => {
  const { id } = req.params;
  const { userId } = req.body;
  await db.insert(organizationUsers).values({ organizationId: id, userId });
  res.json({ success: true });
});

export default router;

2.2. Add Routes to server.ts

import organizationRoutes from "./routes/organizationRoutes";

app.use("/api/organization", organizationRoutes);


⸻

3. Stripe Integration (Subscriptions)

3.1. Install Stripe

In Replit Shell:

npm install stripe @types/stripe

3.2. Create stripeRoutes.ts

import express from "express";
import Stripe from "stripe";
import { db } from "../db";
import { organizations } from "../db/schema";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: "2023-10-16" });
const router = express.Router();

// Create checkout session
router.post("/checkout", async (req, res) => {
  const { organizationId, plan } = req.body;

  const session = await stripe.checkout.sessions.create({
    payment_method_types: ["card"],
    mode: "subscription",
    line_items: [{ price: plan === "premium" ? process.env.STRIPE_PREMIUM_PRICE! : process.env.STRIPE_STANDARD_PRICE!, quantity: 1 }],
    success_url: `${process.env.FRONTEND_URL}/dashboard/org?success=true`,
    cancel_url: `${process.env.FRONTEND_URL}/dashboard/org?canceled=true`,
  });

  res.json({ url: session.url });
});

// Webhook to update subscription status
router.post("/webhook", express.raw({ type: "application/json" }), async (req, res) => {
  let event;
  try {
    event = stripe.webhooks.constructEvent(req.body, req.headers["stripe-signature"]!, process.env.STRIPE_WEBHOOK_SECRET!);
  } catch (err: any) {
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  if (event.type === "checkout.session.completed") {
    const session = event.data.object as Stripe.Checkout.Session;
    const orgId = session.metadata?.organizationId;
    if (orgId) {
      await db.update(organizations).set({ plan: "premium" }).where(eq(organizations.id, orgId));
    }
  }

  res.json({ received: true });
});

export default router;

3.3. Add Stripe Routes to Server

import stripeRoutes from "./routes/stripeRoutes";
app.use("/api/stripe", stripeRoutes);


⸻

4. Frontend Implementation

4.1. Church Signup Page (/signup/church)
	•	Create a form with:
	•	Church name
	•	Admin email
	•	Stripe checkout button.

Call:

await fetch("/api/organization/create", {
  method: "POST",
  body: JSON.stringify({ name: churchName, adminUserId: currentUserId }),
});

4.2. Admin Dashboard (/dashboard/org)
	•	Fetch data:

const { data: org } = useQuery(["organization", orgId], async () => {
  const res = await fetch(`/api/organization/${orgId}`);
  return res.json();
});

	•	Show current plan + “Upgrade to Premium” button (triggers /api/stripe/checkout).

⸻

5. Testing
	•	Seed test organizations:

await db.insert(organizations).values({ name: "Test Church", adminUserId: "UUID..." });

	•	Test Stripe sandbox with test cards: 4242 4242 4242 4242.

⸻

6. Deployment
	•	Environment Variables (on Replit Secrets):
	•	DATABASE_URL
	•	STRIPE_SECRET_KEY
	•	STRIPE_WEBHOOK_SECRET
	•	STRIPE_STANDARD_PRICE
	•	STRIPE_PREMIUM_PRICE
	•	FRONTEND_URL

⸻

Next Step

I can create copy-paste-ready code stubs (files with Drizzle schema, Express routes, React components) that you can directly drop into your Replit project.

Do you want me to generate the complete ready-to-use code package (schema + routes + frontend components) for this church account system?